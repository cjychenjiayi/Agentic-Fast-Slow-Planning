from langchain.tools import tool
from typing import List
from astar_tool.llm_astar import llm_path_generate
from memory_topo_scena.rag_database import scene_store
import math
def parse_hyperparam(text: str):
    content = text.strip()[1:-1]
    parts = [p.strip() for p in content.split(',')]
    nums = [float(p) for p in parts]
    return nums

def parse_llmguide(text: str):
    content = text.strip()[1:-1]
    parts = [p.strip().replace("'", "").replace('"', "") for p in content.split(',')]
    nums = [str(p.lower()) for p in parts]
    return nums
def calc_distance_angle(ax=141, ay=-143, bx=1, by=1):
    dx = bx - ax
    dy = by - ay
    distance = math.hypot(dx, dy)
    angle_rad = math.atan2(dy, dx)
    angle_deg = math.degrees(angle_rad)
    return round(distance, 2), angle_rad, round(angle_deg,2)

@tool
def astar_path_generate(llm_guide: str, hyper_params: str, index: int) -> str:
    """
    Generate a path based on semantic guide as well as hyper_params
    Input: A list of semantic navigation hints from an LLM (e.g., ["left", "right", "keep"]), the hyper-params and the current retry time.
    Output: An string describing the navigation trajectory, including path information and index to action pairs
    """
    hyper_params = parse_hyperparam(hyper_params)
    llm_guide = parse_llmguide(llm_guide)
    path_a_star, path_info, llm_action, cost_name = llm_path_generate(llm_guide=llm_guide, hyper_params = hyper_params, output_path=f"temp/{index}.png")
    with open(f"temp/{index}.txt", "w") as f:
        for point in path_a_star:
            f.write(f"{point[0]} {point[1]}\n")
    path_info_str = ""
    for i, a in path_info:
        dist, _, orient = calc_distance_angle(bx = i[0], by = i[1])
        path_info_str += f"Action {a} happens in {dist} meter, {orient} degree on the road" 
    llm_action_str = str([a for a in llm_action if a is not None])
    lm_cost_str = str([cost for cost in cost_name if cost is not None])
    prompt = f"""The path generated by this llm guide and hyper-param is:
Path info:
{path_info_str}
LLM  action list:
{llm_action_str}
Semantic Cost sequence:
{lm_cost_str}
"""
    return prompt

@tool
def select_ref_hyperparams(scene: str) -> str:
    """
    Get Reference Scene with hyperparameters
    Scene will include a list, where each element is a list of (object_class:str, dist:float, orient:float)
    For example:
    [["streetbarrier", 8.5, 0.0], ["vehicle", 0.5, 10.0]]
    """
    reference_scene = scene_store.match(scene)
    return str(reference_scene["hyperparams"])

@tool
def save_scene(scene: str, hyper_param: str):
    """Store the scene with corresponding hyperparameters"""
    scene_store.add_llm(scene, hyper_param)
    return f"Saving Finish\nSaving scene {scene} with hyper_param {hyper_param} to database"
